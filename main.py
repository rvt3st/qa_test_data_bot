import os
import time
import json
from secrets import token_urlsafe

from faker import Faker
from telebot import TeleBot, types
from html import escape

# –ù–ê–°–¢–†–û–ô–ö–ò
TOKEN = os.getenv("TOKEN")
bot = TeleBot(TOKEN, parse_mode='html')

faker_default = Faker()
faker_ru = Faker('ru_RU')

# –§–æ—Ä–º–∞—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
FILE_FORMATS = ['.jpg', '.png', '.svg', '.gif', '.ico',
                '.mp4', '.avi', '.webm',
                '.doc', '.docx', '.xls', '.xlsx',
                '.txt', '.pdf', '.css', '.html', '.js', '.json',
                '.zip', '.rar']

MAX_BYTES = 45 * 1024 * 1024

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton('üí≥ –ö–∞—Ä—Ç–∞'),
           types.KeyboardButton('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
    kb.row(types.KeyboardButton('üìÑ –§–∞–π–ª'),
           types.KeyboardButton('üî§ –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏'))
    return kb

def back_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    return kb

# /start
@bot.message_handler(commands=['start'])
def start_handler(message: types.Message):
    bot.set_my_commands([types.BotCommand('/start', '–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫')])
    bot.send_message(
        message.chat.id,
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è <b>–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>.\n'
        '–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é üëá',
        reply_markup=main_menu()
    )

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
def back_to_menu(message: types.Message):
    start_handler(message)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã

@bot.message_handler(func=lambda m: m.text == 'üí≥ –ö–∞—Ä—Ç–∞')
def route_card(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton('VISA'), types.KeyboardButton('Mastercard'))
    kb.row(types.KeyboardButton('Maestro'), types.KeyboardButton('–ú–ò–†'))
    kb.row(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–∞—Ä—Ç—ã:', reply_markup=kb)
    bot.register_next_step_handler(message, handle_card_type)

def handle_card_type(message: types.Message):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return start_handler(message)

    mapping = {
        'VISA': 'visa',
        'Mastercard': 'mastercard',
        'Maestro': 'maestro',
        '–ú–ò–†': 'mir',
    }
    card_type = mapping.get(message.text)
    if not card_type:
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', reply_markup=back_menu())
        return

    if card_type == 'mir':
        number = faker_ru.credit_card_number(card_type)
    else:
        number = faker_default.credit_card_number(card_type)

    bot.send_message(
        message.chat.id,
        f'–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ <b>{message.text}</b>:\n<code>{number}</code>',
        reply_markup=main_menu()
    )

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

@bot.message_handler(func=lambda m: m.text == 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
def route_users(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton('1Ô∏è‚É£'), types.KeyboardButton('2Ô∏è‚É£'))
    kb.row(types.KeyboardButton('5Ô∏è‚É£'), types.KeyboardButton('üîü'))
    kb.row(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=kb)
    bot.register_next_step_handler(message, handle_users_count)

def handle_users_count(message: types.Message):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return start_handler(message)
    mapping = {'1Ô∏è‚É£': 1, '2Ô∏è‚É£': 2, '5Ô∏è‚É£': 5, 'üîü': 10}
    n = mapping.get(message.text)
    if not n:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', reply_markup=back_menu())
        return

    payload = []
    for _ in range(n):
        p = faker_ru.simple_profile()
        p['phone'] = f'+7{faker_ru.msisdn()[3:]}' 
        p['password'] = token_urlsafe(10) 
        payload.append(p)

    text = json.dumps(payload, indent=2, ensure_ascii=False, sort_keys=True, default=str)
    bot.send_message(message.chat.id, f'–î–∞–Ω–Ω—ã–µ {n} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n<code>{text}</code>', reply_markup=main_menu())

# –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã

@bot.message_handler(func=lambda m: m.text == 'üìÑ –§–∞–π–ª')
def route_file(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    kb.add(*FILE_FORMATS)
    kb.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:', reply_markup=kb)
    bot.register_next_step_handler(message, handle_file_format)

def handle_file_format(message: types.Message):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return start_handler(message)
    if message.text not in FILE_FORMATS:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', reply_markup=back_menu())
        return

    chosen_format = message.text
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add('B (–±–∞–π—Ç—ã)', 'KB (–∫–∏–ª–æ–±–∞–π—Ç—ã)', 'MB (–º–µ–≥–∞–±–∞–π—Ç—ã)')
    kb.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    msg = bot.send_message(
        message.chat.id,
        f'–í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ <b>{chosen_format}</b>.\n–í—ã–±–µ—Ä–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:',
        reply_markup=kb
    )
    bot.register_next_step_handler(msg, handle_file_unit, chosen_format)

def handle_file_unit(message: types.Message, chosen_format: str):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return start_handler(message)
    if message.text not in ['B (–±–∞–π—Ç—ã)', 'KB (–∫–∏–ª–æ–±–∞–π—Ç—ã)', 'MB (–º–µ–≥–∞–±–∞–π—Ç—ã)']:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞. –í—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', reply_markup=back_menu())
        return

    unit = message.text
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
    msg = bot.send_message(
        message.chat.id,
        f'–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: <b>{chosen_format}</b>\n–ï–¥–∏–Ω–∏—Ü—ã: <b>{unit}</b>\n\n'
        '–í–≤–µ–¥–∏ <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ</b> ‚Äî —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.\n'
        '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: 1 –±–∞–π—Ç ‚Ä¶ 45 MB.',
        reply_markup=kb
    )
    bot.register_next_step_handler(msg, handle_file_size, chosen_format, unit)

def handle_file_size(message: types.Message, chosen_format: str, unit: str):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return start_handler(message)

    if not message.text.isdigit():
        return bot.send_message(message.chat.id, '–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.', reply_markup=back_menu())

    size = int(message.text)
    if unit.startswith('MB'):
        size_bytes = size * 1024 * 1024
        unit_short = 'MB'
    elif unit.startswith('KB'):
        size_bytes = size * 1024
        unit_short = 'KB'
    else:
        size_bytes = size
        unit_short = 'B'

    if size_bytes < 1 or size_bytes > MAX_BYTES:
        return bot.send_message(message.chat.id, '–†–∞–∑–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1 B ‚Ä¶ 45 MB).', reply_markup=back_menu())

    ts = int(time.time())
    filename = f'{ts}-{size_bytes}-bytes{chosen_format}'
    with open(filename, 'wb') as f:
        f.write(os.urandom(size_bytes))

    if unit_short in ('MB', 'KB'):
        caption = f'–§–∞–π–ª {chosen_format} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.\n–†–∞–∑–º–µ—Ä: <b>{size} {unit_short}</b> ({size_bytes:,} B)'.replace(',', ' ')
    else:
        caption = f'–§–∞–π–ª {chosen_format} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.\n–†–∞–∑–º–µ—Ä: <b>{size_bytes:,} B</b>'.replace(',', ' ')

    with open(filename, 'rb') as f:
        bot.send_document(message.chat.id, f, caption=caption, reply_markup=main_menu())

    try:
        os.unlink(filename)
    except OSError:
        pass

# –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏

@bot.message_handler(func=lambda m: m.text == 'üî§ –°—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏')
def route_special_string(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É'))
    kb.row(types.KeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    bot.send_message(
        message.chat.id,
        '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞–º–∏?',
        reply_markup=kb
    )

@bot.message_handler(func=lambda m: m.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É')
def handle_special_string(message: types.Message):
    part_cyr = '–ö–∏—Ä–∏–ª–ª–∏—Ü–∞: –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!'
    part_ar = 'ÿπÿ±ÿ®Ÿä: ŸÖÿ±ÿ≠ÿ®Ÿãÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ'
    part_zh = '‰∏≠ÊñáÔºö‰Ω†Â•ΩÔºå‰∏ñÁïå'
    part_di = '–î–∏–∞–∫—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã: ƒÑ ƒò ƒñ ƒÆ ≈≤ ≈™'
    part_emj = 'Emoji: üòÄü•∑üèΩüöÄ‚ú®üì¶'
    part_ws = '–ü—Ä–æ–±–µ–ª—ã‚ÄÇ–∏ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π\u00A0–ø—Ä–æ–±–µ–ª'
    part_newlines = '–ü–µ—Ä–µ–Ω–æ—Å—ã:\n—Å—Ç—Ä–æ–∫–∞ 1\n—Å—Ç—Ä–æ–∫–∞ 2\r\n—Å—Ç—Ä–æ–∫–∞ 3'
    part_quotes = '–ö–∞–≤—ã—á–∫–∏: "double" ¬´—ë–ª–æ—á–∫–∏¬ª ‚Äòsingle‚Äô'
    part_esc = r'–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: \n \t \\ \/ < > &'

    long_mixed = ('–∞–±–≤üôÇABCÊº¢Â≠ó' * 80)[:1000]

    full = (
        f'{part_cyr}\n{part_ar}\n{part_zh}\n{part_di}\n{part_emj}\n'
        f'{part_ws}\n{part_newlines}\n{part_quotes}\n{part_esc}\n\n'
        f'–î–ª–∏–Ω–Ω–∞—è_—Å—Ç—Ä–æ–∫–∞_1000—Å–∏–º–≤:\n{long_mixed}'
    )

    safe = escape(full, quote=False)
    bot.send_message(
        message.chat.id,
        f'–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤ –≤–≤–æ–¥–∞/–≤–∞–ª–∏–¥–∞—Ü–∏–∏/–ª–æ–≥–æ–≤:\n<pre>{safe}</pre>',
        reply_markup=main_menu(),
        disable_web_page_preview=True
    )

# –ó–∞–ø—É—Å–∫
def main():
    bot.infinity_polling()

if __name__ == '__main__':
    main()



